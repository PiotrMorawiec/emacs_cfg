#+TITLE: Emacs Configuration
#+AUTHOR Piotr Morawiec
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes

* Welcome

Welcome to my Emacs configuration (init) file.
The structure of this file has been inspired by the [[https://github.com/daviwil/emacs-from-scratch/tree/9388cf6ecd9b44c430867a5c3dad5f050fdc0ee1][Emacs From Scratch]] project, so I warmly encourage to get familiar with it, as well as with associated [[https://www.youtube.com/c/SystemCrafters][SystemCrafters]] series on YouTube.

Type =C-c C-v t= or =org-babel-tangle= to tangle this file into =init.el=.

* Start message

Print start-of-configuration message, and set lexical binding for the init file.

#+begin_src emacs-lisp
  ;; -*- lexical-binding: t; -*-
  (message "Start reading ~/.emacs.d/init.el ...")
#+end_src

* Startup performance

#+begin_src emacs-lisp
  ;; The default is 800 kilobytes.  Measured in bytes.
  (setq gc-cons-threshold (* 50 1000 1000))

  (defun my/display-startup-time ()
    (message "Emacs loaded in %s with %d garbage collections."
             (format "%.2f seconds"
                     (float-time
                      (time-subtract after-init-time before-init-time)))
             gcs-done))

  (add-hook 'emacs-startup-hook #'my/display-startup-time)
#+end_src

* Custom functions

#+begin_src emacs-lisp
  ;; ==============================================================
  ;; CUSTOM FUNCTIONS
  ;; ==============================================================

  (defun my/scroll-half-page-down ()
    "scroll down half the page"
    (interactive)
    (scroll-down (/ (window-body-height) 2)))


  (defun my/scroll-half-page-up ()
    "scroll up half the page"
    (interactive)
    (scroll-up (/ (window-body-height) 2)))


  (defun my/duplicate-current-line-or-region (arg)
    "Duplicates the current line or region ARG times.
            If there's no region, the current line will be duplicated. However, if
            there's a region, all lines that region covers will be duplicated."
    (interactive "p")
    (let (beg end (origin (point)))
      (if (and mark-active (> (point) (mark)))
          (exchange-point-and-mark))
      (setq beg (line-beginning-position))
      (if mark-active
          (exchange-point-and-mark))
      (setq end (line-end-position))
      (let ((region (buffer-substring-no-properties beg end)))
        (dotimes (i arg)
          (goto-char end)
          (newline)
          (insert region)
          (setq end) (point))
        (goto-char (+ origin (* (length region) arg) arg)))))


  (defun my/toggle-highlight-trailing-whitespaces ()
    "Function toggles highlighting trailing whitespaces"
    (interactive)
    (if (bound-and-true-p show-trailing-whitespace)
        (progn  (message "Disable highlighting of trailing whitespaces")
                (setq-default show-trailing-whitespace nil))
      (progn (message "Enable highlighting of trailing whitespaces")
             (setq-default show-trailing-whitespace t))))



  (defun my/toggle-idle-highlight-mode ()
    "Function toggles 'idle-highlight-mode'"
    (interactive)
    (if (bound-and-true-p dle-highlight-mode)
        (progn  (message "Disable 'idle-highlight-mode'")
                (setq-default idle-highlight-mode nil))
      (progn (message "Enable 'idle-highlight-mode'")
             (setq-default idle-highlight-mode t))))


  (defun my/which-active-modes ()
    "Give a message of which minor modes are enabled in the current buffer."
    (interactive)
    (let ((active-modes))
      (mapc (lambda (mode) (condition-case nil
                               (if (and (symbolp mode) (symbol-value mode))
                                   (add-to-list 'active-modes mode))
                             (error nil) ))
            minor-mode-list)
      (message "Active modes are %s" active-modes)))


  (defun my/untabify-entire-buffer ()
    (interactive)
    (mark-whole-buffer)
    (untabify (region-beginning) (region-end))
    (message "Converting all TAB's to spaces")
    (keyboard-quit))


  (defun my/open-init-file ()
    (interactive)
    (find-file "~/.emacs.d/init.el")
    (message "Init file opened"))


  ;; Function copied from Emacs Wiki (https://www.emacswiki.org/emacs/KillingBuffers)
  (defun my/close-and-kill-this-pane ()
    "If there are multiple windows, then close this pane and kill the buffer in it also."
    (interactive)
    (kill-this-buffer)
    (if (not (one-window-p))
        (delete-window)))


  ;; Function copied from Emacs Wiki (https://www.emacswiki.org/emacs/KillingBuffers)
  (defun my/close-and-kill-next-pane ()
    "If there are multiple windows, then close the other pane and kill the buffer in it also."
    (interactive)
    (other-window 1)
    (kill-this-buffer)
    (if (not (one-window-p))
        (delete-window)))


  (defun my/other-window-kill-buffer ()
    "Function woks when there are multiple windows opened in the current frame.
         Kills the currently opened buffer in all the other windows"
    (interactive)
    ;; Window selection is used because point goes to a different window
    ;; if more than 2 windows are present
    (let ((win-curr (selected-window))
          (win-other (next-window)))
      (select-window win-other)
      (kill-this-buffer)
      (select-window win-curr)))


  (defun my/kill-other-buffers ()
    "Kill all other buffers except the active buffer."
    (interactive)
    (mapc 'kill-buffer
          (delq (current-buffer) (buffer-list))))


  ;; TODO: prevent function from removing *Messages buffer
  ;; https://stackoverflow.com/questions/1687620/regex-match-everything-but-specific-pattern
  (defun my/kill-asterisk-buffers ()
    "Kill all buffers whose names start with an asterisk (‘*’).
         By convention, those buffers are not associated with files."
    (interactive)
    (kill-matching-buffers "*" nil t)
    (message "All asterisk (*) buffers have been killed"))


  (defun my/reinstall-all-activated-packages ()
    "Refresh and reinstall all activated packages."
    (interactive)
    (package-refresh-contents)
    (dolist (package-name package-activated-list)
      (when (package-installed-p package-name)
        (unless (ignore-errors                   ;some packages may fail to install
                  (package-reinstall package-name))
          (warn "Package %s failed to reinstall" package-name)))))

  (defun my/reinstall-package (pkg)
    (interactive (list (intern (completing-read "Reinstall package: " (mapcar #'car package-alist)))))
    (unload-feature pkg)
    (package-reinstall pkg)
    (require pkg))

#+end_src

* Basic UI configuration

#+begin_src emacs-lisp
  ;; ==============================================================
  ;; BASIC UI CONFIG
  ;; ==============================================================

  ;; Set startup screen photo
  ;; (setq fancy-splash-image "path")

  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (tooltip-mode -1)
  (set-fringe-mode 10)
  (blink-cursor-mode 1)
  (delete-selection-mode 1)
  (column-number-mode 1)

  ;; Enable / disable displaying LR/CR characters
  ;; (global-whitespace-mode nil)

  ;; Enable mouse support in terminal Emacs
  (xterm-mouse-mode 1)

  ;; Enable auto revert mode globally, so that all buffers will be in sync with whats actually on disk.
  ;; If you are sure that the file will only change by growing at the end, use Auto Revert Tail mode instead, as
  ;; it is more efficient for this.
  (global-auto-revert-mode t)


  ;; How to get colors in terminal Emacs ?
  ;; https://www.gnu.org/software/emacs/manual/html_mono/efaq.html#Colors-on-a-TTY

  ;; Mouse behaviour
  (setq mouse-wheel-progressive-speed nil)

  ;; Set frame transparency
  (set-frame-parameter (selected-frame) 'alpha '(92 . 92))
  (add-to-list 'default-frame-alist '(alpha . (92 . 92)))

  ;; Enable full screen
  (set-frame-parameter (selected-frame) 'fullscreen 'maximized)
  (add-to-list 'default-frame-alist '(fullscreen . maximized))

  ;; Do not create backup files (with ~ suffix)
  (setq make-backup-files nil)

  ;; Make ESC quit prompts
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

  (global-hl-line-mode 1)
  (set-face-background hl-line-face "gray13")

  (setq-default show-trailing-whitespace nil)
  (setq-default explicit-shell-file-name "/bin/bash")

#+end_src

* Configuration files

#+begin_src emacs-lisp
  ;; ==============================================================
  ;; ADDITIONAL CONFIG FILES
  ;; ==============================================================
#+end_src

#+begin_src emacs-lisp
  ;; Do not use `init.el` for `custom-*` code (generated by 'M-x customize' menu) - use `custom-file.el`.
  (setq custom-file "~/.emacs.d/custom-file.el")

  ;; Use default Emacs bookmarks localisation (for now)
  (setq bookmark-default-file "~/.emacs.d/bookmarks")

  ;; Assuming that the code in custom-file is execute before the code
  ;; ahead of this line is not a safe assumption. So load this file
  ;; proactively.
  (load-file custom-file)
#+end_src

* PROXY settings

#+begin_src emacs-lisp
  (setq url-proxy-services nil)
#+end_src

* Package repositories settings

#+begin_src emacs-lisp
  ;; ==============================================================
  ;; PACKAGE REPOSITORIES
  ;; ==============================================================
#+end_src

#+begin_src emacs-lisp
(require 'package)

(add-to-list 'package-archives '("gnu"          . "https://elpa.gnu.org/packages/")     t)
(add-to-list 'package-archives '("melpa"        . "https://melpa.org/packages/")        t)
(add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/") t)

;; Load Emacs Lisp packages, and activate them - variable ‘package-load-list’ controls which packages to load.
(package-initialize)

;; Update list of available packages - sth like 'git fetch'
;; doing it together with 'unless' reduces emacs startup time significantly
(unless package-archive-contents
  (package-refresh-contents))

(when (not (package-installed-p 'use-package))
        (package-install 'use-package))

(require 'use-package)
(setq use-package-always-ensure t)
#+end_src

* Theme

#+begin_src emacs-lisp
(use-package spacemacs-theme
  :ensure t
  :defer t
  :custom
        (setq spacemacs-theme-comment-bg nil)
        (setq spacemacs-theme-comment-italic t)
  :init (load-theme 'spacemacs-dark t))
#+end_src

* Fonts

Let's use the [[https://github.com/tonsky/FiraCode/wiki/Linux-instructions#installing-with-a-package-manager][Fira Code]] and [[https://fonts.google.com/specimen/Cantarell][Cantarell]] fonts for this configuration which will more than likely need to be installed on your machine. Both can usually be found in the various Linux distro package managers or downloaded from the links above.

How to install required fonts on Debian / Ubuntu machine ?
- FiraCode:  =sudo apt-get install fonts-firacode=  ( [[https://github.com/tonsky/FiraCode/wiki/Linux-instructions#installing-with-a-package-manager][Installing FiraCode on Linux machines]] )
- Cantarell:  =sudo apt-get install fonts-cantarell=

Debian / Ubuntu packages:
- =fonts-firacode=
- =fonts-cantarell=
- =texlive-fonts-extra= (rather for LaTeX)

Fixed Pitch vs Variable Pitch:
- =fixed-pitch= fonts - fonts whose characters (letters and spacings) always occupy the same amount of horizontal space (have the same widths).
- =variable-pitch= fonts - fonts whose characters (letters and spacings) may occupy different amount of horizontal space (may have different widths). This kind of fonts looks more raw, and are well suited for document-looking texts.

#+begin_src emacs-lisp
  ;; You will most likely need to adjust this font size for your system!
  (defvar my/default-font-size 130)
  (defvar my/default-variable-font-size 130)

  (set-face-attribute 'default nil :font "Fira Code Retina" :height my/default-font-size)

  ;; Set the fixed pitch face
  (set-face-attribute 'fixed-pitch nil :font "Fira Code Retina" :height my/default-font-size)

  ;; Set the variable pitch face
  (set-face-attribute 'variable-pitch nil :font "Cantarell" :height my/default-variable-font-size :weight 'regular)
#+end_src

* Dashboard

#+begin_src emacs-lisp
  (use-package dashboard
    :ensure t
    :diminish dashboard-mode
    :config
    (setq dashboard-banner-logo-title "Let's code ;)")
    (setq dashboard-startup-banner "~/.emacs.d/img/pm_profile_scaled.png")
    (setq dashboard-center-content t)
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)
    (setq dashboard-set-footer nil)
    (setq dashboard-items '((projects  . 3)
                            (agenda    . 3)
                            (bookmarks . 3)))
    (dashboard-setup-startup-hook))
#+end_src

* Packages

#+begin_src emacs-lisp
  ;; ==============================================================
  ;; PACKAGES
  ;; ==============================================================
#+end_src

** all-the-icons

#+begin_src emacs-lisp
  (use-package all-the-icons
    :ensure t)

  ;; This should be invoked on a given machine only once
  ;; (all-the-icons-install-fonts)

  ;; Test all-the-icons package with executing (C-x C-e)
  ;; (all-the-icons-insert-alltheicon)
#+end_src

** Org Mode

*** Font Faces

The =my/org-font-setup= function configures various text faces to tweak the sizes of headings and use variable width fonts (=variable-pitch=) in most cases so that it looks more like we’re editing a document in org-mode. We switch back to fixed width (monospace / =fixed-picth=) fonts for code blocks and tables so that they display correctly.

#+begin_src emacs-lisp
  (defun my/org-font-setup ()
    ;; Replace list hyphen with dot
    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

    ;; Set faces for heading levels
    (dolist (face '((org-level-1 . 1.2)
                    (org-level-2 . 1.1)
                    (org-level-3 . 1.05)
                    (org-level-4 . 1.0)
                    (org-level-5 . 1.1)
                    (org-level-6 . 1.1)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face)))

    ;; Ensure that anything that should be fixed-pitch in Org files appears that way
    (set-face-attribute 'org-block nil    :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-table nil    :inherit 'fixed-pitch)
    (set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil     :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil    :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil  :inherit 'fixed-pitch)
    (set-face-attribute 'line-number nil :inherit 'fixed-pitch)
    (set-face-attribute 'line-number-current-line nil :inherit 'fixed-pitch)
    )
#+end_src

*** Common config

#+begin_src emacs-lisp
  (defun my/org-mode-setup ()
    (interactive)
    (org-indent-mode)
    ;; Turn on variable-pitch mode in org buffers.
    ;; That will make all the fonts which were not explicitly set to fixed-pitch, to be variable-pitch
    (variable-pitch-mode 1)
    ;; Enable text wrapping in org-mode (it looks better when side piddings enbaled)
    (visual-line-mode 1))

  (use-package org
    :ensure t
    :hook (org-mode . my/org-mode-setup)
    :config
    (setq org-ellipsis " ▾")
    ;; start org-agenda in log-mode by default (like if 'a' option was chosen)
    (setq org-agenda-start-with-log-mode t)
    ;; whenever task is DONE - add information (log) about when the task has been finished
    (setq org-log-done 'time)
    ;; Hide org emphasis characters, like *, =, -, + etc.
    (setq org-hide-emphasis-markers t)
    (setq org-log-done 'time)
    (setq org-log-into-drawer t)
    (my/org-font-setup))
#+end_src

*** Emphasis characters

#+begin_src emacs-lisp
  ;; Bind certain org emphasis functionalities to certain keys
  (setq org-emphasis-alist
	(quote (("*" bold)
		("/" italic)
		("_" underline)
		("=" (:foreground "orange" :background inherit))
		("~" org-verbatim verbatim)
		("+"
		 (:strike-through t))
		)))
#+end_src

*** ORG Visual Fill

#+begin_src emacs-lisp
  (defun my/org-mode-visual-fill ()
    "Function imposes left and right side paddings in org-mode"
    (interactive)
    (setq visual-fill-column-width 100
	  visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  ;; Package that allows left/right side padding in org mode
  (use-package visual-fill-column
    :hook (org-mode . my/org-mode-visual-fill))
#+end_src

*** ORG Bullets

#+begin_src emacs-lisp
  (use-package org-bullets
    :ensure t
    :after org
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

  (add-hook 'org-mode-hook #'org-bullets-mode)
#+end_src

*** ORG Wild Notifier

#+begin_src emacs-lisp
  ;; This package enables org notifications on your OS desktop
  (use-package org-wild-notifier
    :ensure t)
#+end_src

*** ORG Roam

#+begin_src emacs-lisp
    (use-package org-roam
      :ensure t
      :init
      (setq org-roam-v2-ack t)
      :custom
      (org-roam-directory "~/org_roam_database")
      (org-roam-completion-everywhere t)
      (org-roam-capture-templates
       '(("d" "default" plain
          "%?"
          :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
          :unnarrowed t)
         ("m" "meeting" plain
          (file "~/org_roam_database/templates/meeting_template.org")
          :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "")
          :unnarrowed t)
         ("e" "words" plain
          (file "~/org_roam_database/templates/words_template.org")
          :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "")
          :unnarrowed t)
         ("t" "todo list" plain
          (file "~/org_roam_database/templates/todos_template.org")
          :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "")
          :unnarrowed t)
         ("p" "private agenda" plain
          (file "~/org_roam_database/templates/private_agenda_template.org")
          :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "")
          :unnarrowed t)
         ("w" "work agenda" plain
          (file "~/org_roam_database/templates/work_agenda_template.org")
          :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "")
          :unnarrowed t)
         ))
      :bind (("C-c n l" . org-roam-buffer-toggle)
             ("C-c n f" . org-roam-node-find)
             ("C-c n i" . org-roam-node-insert)
             :map org-mode-map
             ("C-M-i" . completion-at-point)
             :map org-roam-dailies-map
             ("Y" . org-roam-dailies-capture-yesterday)
             ("T" . org-roam-dailies-capture-tomorrow)
             ("I" . my/org-roam-node-insert-immediate))
      :bind-keymap
      ("C-c n d" . org-roam-dailies-map)
      :config
      (require 'org-roam-dailies) ;; Ensure the keymap "org-roam-dailies-map" is available
      (org-roam-db-autosync-mode))

    (defun my/org-roam-node-insert-immediate (arg &rest args)
      "Function allows to onsert/link a new note without the necessity of filling this note at the moment,
       so you can go back later and fill those notes in with more details"
      (interactive "P")
      (let ((args (cons arg args))
            (org-roam-capture-templates (list (append (car org-roam-capture-templates)
                                                      '(:immediate-finish t)))))
        (apply #'org-roam-node-insert args)))

    (defun my/org-roam-filter-by-tag (tag-name)
      "Function filters Org Roam files by given tag.
       Tags are specified in Org Roam files in '#+filetags:' section."
      (lambda (node)
        (member tag-name (org-roam-node-tags node))))

    (defun my/org-roam-list-notes-by-tag (tag-name)
      "Function returns list composed of all Org Roam files, containing given tag"
      (interactive)
      (mapcar #'org-roam-node-file
              (seq-filter
               (my/org-roam-filter-by-tag tag-name)
               (org-roam-node-list))))

    (defun my/org-roam-refresh-agenda-list ()
      (interactive)
      (require 'org-roam)
      (setq org-agenda-files (append (my/org-roam-list-notes-by-tag "todos")
                                     (my/org-roam-list-notes-by-tag "work_agenda")
                                     (my/org-roam-list-notes-by-tag "private_agenda"))))

    ;; Build the agenda list the first time for the session
    (my/org-roam-refresh-agenda-list)
#+end_src

*** ORG Babel

**** Common configuration

#+begin_src emacs-lisp
;; Do not ask for permission to execute code block
(setq org-confirm-babel-evalauate nil)

;; Set (overwrite) default ORG Babel Header Arguments, for all code blocks.
;; See: https://orgmode.org/manual/Using-Header-Arguments.html
(setq org-babel-default-header-args
      (cons '(:tangle . "yes")
            (assq-delete-all :noweb org-babel-default-header-args)))
#+end_src

**** Configure Babel Languages

#+begin_src emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t)
     (octave . t)
     (emacs-lisp . t)))

  ;; Set Babel to use Python 3
  (setq org-babel-python-command "python3")

  ;; Enable unix-like configuration language (used in plenty of Unix configuration files)
  (push '("conf-unix" . conf-unix) org-src-lang-modes)
#+end_src

**** Structure Templates

#+begin_src emacs-lisp
;; This is needed as of Org 9.2
(require 'org-tempo)

;; Type for example
;;   - <py followed by TAB to insert python clode block
;;   - <el followed by TAB to insert elisp  clode block
(add-to-list 'org-structure-template-alist '("sh"  . "src shell"))
(add-to-list 'org-structure-template-alist '("el"  . "src emacs-lisp"))
(add-to-list 'org-structure-template-alist '("py"  . "src python"))
(add-to-list 'org-structure-template-alist '("sv"  . "src verilog"))
(add-to-list 'org-structure-template-alist '("vhd" . "src vhdl"))
#+end_src

**** Auto-Tangle Configuration Files

This snippet adds a hook to =org-mode= buffers so that =my/org-babel-tangle-config= gets executed each time such a buffer gets saved.  This function checks to see if the file being saved is the Emacs.org file you're looking at right now, and if so, automatically exports the configuration here to the associated output files.

#+begin_src emacs-lisp

  ;; Automatically tangle our Emacs.org config file when we save it
  (defun my/org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
                        (expand-file-name "~/.emacs.d/Emacs.org"))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda ()
                             (add-hook 'after-save-hook #'my/org-babel-tangle-config)))

#+end_src
** LSP (Language Server Protocol) mode

#+begin_src emacs-lisp
  (defun my/lsp-mode-setup ()
    "Function configures LSP by disabling/enabling particular LSP features
       See:
          https://emacs-lsp.github.io/lsp-mode/tutorials/how-to-turn-off/"
    ;; Configure headerline
    (setq lsp-headerline-breadcrumb-segments '(file symbols))
    (lsp-headerline-breadcrumb-mode)
    ;; Disable linter by default, as it is annoying (Flycheck / Flymake)
    (setq lsp-diagnostics-provider :none)
    ;; Configure LSP modeline features
    (setq lsp-modeline-code-actions-mode-segments '(count icon name))
    (lsp-modeline-code-actions-mode))


  ;; Language Server Protocol support
  (use-package lsp-mode
    :ensure t
    :after (which-key)
    :commands (lsp lsp-deferred)
    :hook (lsp-mode . my/lsp-mode-setup)
    :init
    (setq lsp-keymap-prefix "C-c l")  ;; Or 'C-l', 's-l'
    :custom
    (lsp-clients-svlangserver-launchConfiguration "verilator -sv --lint-only -Wall")
    (lsp-clients-svlangserver-formatCommand "verible-verilog-format")
    :config
    (lsp-enable-which-key-integration t))

  ;; This package is reposnsible for displaying auxiliary informations on symbols
  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode)
    :custom
    (lsp-ui-doc-position 'bottom))


  ;; Great source of information about flyckeck:
  ;; https://www.masteringemacs.org/article/spotlight-flycheck-a-flymake-replacement
  (use-package flycheck
    :ensure t
    :custom
    (global-flycheck-mode nil))

  (use-package lsp-treemacs
    :after (lsp treemacs))

  (use-package helm-lsp
    :after (lsp helm))

  ;; (define-key lsp-mode-map [remap xref-find-apropos] #'helm-lsp-workspace-symbol)

  (use-package company
    :after lsp-mode
    :hook (lsp-mode . company-mode)
    :bind
    (:map company-active-map
          ("<tab>" . company-complete-selection))
    (:map lsp-mode-map
          ("<tab>" . company-indent-or-complete-common))
    :custom
    ;; amount of letters need to be already typed in order to start completion
    (company-minimum-prefix-length 1)
    ;; time delya before starting completion
    (company-idle-delay 0.0))


  (use-package company-box
    :hook (company-mode . company-box-mode))

#+end_src
** Terminals

*** term-mode

term-mode is a built-in terminal emulator in Emacs. Because it is written in Emacs Lisp, you can start using it immediately with very little configuration. If you are on Linux or macOS, term-mode is a great choice to get started because it supports fairly complex terminal applications (htop, vim, etc) and works pretty reliably. However, because it is written in Emacs Lisp, it can be slower than other options like vterm. The speed will only be an issue if you regularly run console apps with a lot of output.

One important thing to understand is line-mode versus char-mode. line-mode enables you to use normal Emacs keybindings while moving around in the terminal buffer while char-mode sends most of your keypresses to the underlying terminal. While using term-mode, you will want to be in char-mode for any terminal applications that have their own keybindings. If you’re just in your usual shell, line-mode is sufficient and feels more integrated with Emacs.

Some usefull commands / key bingins:
- =C-c C-j / C-c C-k= - switch between line mode and char mode
- =C-c C-p / C-C C-n= - got backward / forward in the buffer's prompts

#+begin_src emacs-lisp
  (use-package term
    :config
    (setq explicit-shell-file-name "bash") ;; Change this to zsh, etc
    ;;(setq explicit-zsh-args '())         ;; Use 'explicit-<shell>-args for shell-specific args

    ;; Match the default Bash shell prompt.  Update this if you have a custom prompt
    (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *"))
#+end_src

*** Better term-mode colors

The =eterm-256color= package enhances the output of =term-mode= to enable handling of a wider range of color codes so that many popular terminal applications look as you would expect them to. Keep in mind that this package requires =ncurses=  to be installed on your machine so that it has access to the tic program. Most Linux distributions come with this program installed already so you may not have to do anything extra to use it.

#+begin_src emacs-lisp
  (use-package eterm-256color
    :hook (term-mode . eterm-256color-mode))
#+end_src

*** ansi-term

=ansi-term= is basically the same functionality as term-mode.
The main, important difference between these two is that ansi-term allows to easly create multiple termianl buffers, when invoked multiple times, whereas in term-mode , such action requires the current term buffer to be renamed first (by e.g. =rename-uniquely=), as every new term buffer will be created with the same, default name.

*** vterm

=vterm= is an improved terminal emulator package which uses a =compiled native module= to interact with the underlying terminal applications. This enables it to be much faster than =term-mode= and to also provide a more complete terminal emulation experience.

Make sure that you have the [[https://github.com/akermu/emacs-libvterm/#requirements][necessary dependancies]] installed before trying to use vterm because there is a module that will need to be compiled before you can use it successfully.

#+begin_src emacs-lisp
  (use-package vterm
    :commands vterm
    :config
    (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *")  ;; Set this to match your custom shell prompt
    ;;(setq vterm-shell "zsh")                       ;; Set this to customize the shell to launch
    (setq vterm-max-scrollback 10000))
#+end_src

*** Eshell

Eshell is Emacs’ own shell implementation written in Emacs Lisp. It provides you with a cross-platform implementation (even on Windows!) of the common GNU utilities you would find on Linux and macOS (ls, rm, mv, grep, etc). It also allows you to call Emacs Lisp functions directly from the shell and you can even set up aliases (like aliasing vim to find-file). Eshell is also an Emacs Lisp REPL which allows you to evaluate full expressions at the shell.

The downsides to Eshell are that it can be harder to configure than other packages due to the particularity of where you need to set some options for them to go into effect, the lack of shell completions (by default) for some useful things like Git commands, and that REPL programs sometimes don’t work as well. However, many of these limitations can be dealt with by good configuration and installing external packages, so don’t let that discourage you from trying it!

Useful key bindings:
- =C-c C-p / C-c C-n= - go back and forward in the buffer’s prompts (also [[ and ]] with evil-mode)
- =M-p / M-n= - go back and forward in the input history
- =C-c C-u= - delete the current input string backwards up to the cursor
- =counsel-esh-history= - A searchable history of commands typed into Eshell

#+begin_src emacs-lisp
    (defun my/configure-eshell ()
      ;; Save command history when commands are entered
      (add-hook 'eshell-pre-command-hook 'eshell-save-some-history)

      ;; Truncate buffer for performance
      (add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)

      ;; Bind some useful keys for evil-mode
      ;; (evil-define-key '(normal insert visual) eshell-mode-map (kbd "C-r") 'counsel-esh-history)
      ;; (evil-define-key '(normal insert visual) eshell-mode-map (kbd "<home>") 'eshell-bol)
      ;; (evil-normalize-keymaps)

      (setq eshell-history-size         10000
            eshell-buffer-maximum-lines 10000
            ;; If a command was executen multiple times in a row, save in in history only once
            eshell-hist-ignoredups t
            eshell-scroll-to-bottom-on-input t))

    ;; This package loads fancy eshell prompts for GIT users
    ;; To set given prompt, type M-x eshell-git-prompt-use-theme
    (use-package eshell-git-prompt
      :ensure t)

    (use-package eshell
      :hook (eshell-first-time-mode . my/configure-eshell)
      :config

      ;; Eshell is comprised of a series of packages, and sometimes you have to hook
      ;; your configurtion after the load of a particular package so that it works correctly.
      ;; esh-opt is one of those packages.
      ;; This is one of those  oddities of configuration for eshell.
      (with-eval-after-load 'esh-opt
        (setq eshell-destroy-buffer-when-process-dies t)
        ;; The commands blow will be in fact run in term-mode
        ;; as those doesn't always works correctly on Eshell
        (setq eshell-visual-commands '("ssh" "htop" "zsh" "vim")))

        (eshell-git-prompt-use-theme 'powerline))
#+end_src

** TRAMP

[[https://www.gnu.org/software/emacs/manual/html_node/tramp/Quick-Start-Guide.html][TRAMP Quick Start Guide]]

*Using TRAMP filenames*
- =/method:user@host:path/to/file= - template of a TRAMP file name
- =/ssh:hostname:path/to/file= - in this case TAMP will read host (user, domain, port) from .ssh/config file
- =/-::= - logs into the given server using the  default settings

*Using ssh and plink*
If your local host runs an SSH client, and the remote host runs an SSH server, the simplest remote file name is /ssh:user@host:/path/to/file. The remote file name /ssh:: opens a remote connection to yourself on the local host, and is taken often for testing TRAMP.

On MS Windows, PuTTY is often used as SSH client. Its plink method can be used there to open a connection to a remote host running an ssh server: /plink:user@host:/path/to/file.

*Using su, sudo and sg*
Sometimes, it is necessary to work on your local host under different permissions. For this, you could use the su or sudo connection method. Both methods use ‘root’ as default user name and the return value of (system-name) as default host name. Therefore, it is convenient to open a file as /sudo::/path/to/file.

The method sg stands for “switch group”; the changed group must be used here as user name. The default host name is the same.

*Combining ssh or plink with su or sudo*
If the su or sudo option shall be performed on another host, it could be comnbined with a leading ssh or plink option. That means, TRAMP connects first to the other host with non-administrative credentials, and changes to administrative credentials on that host afterwards. In a simple case, the syntax looks like /ssh:user@host|sudo::/path/to/file.

*Tramp prompt issue explanation* (solution works !):
https://emacs.stackexchange.com/questions/24159/tramp-waiting-for-prompts-from-remote-shell

*Using magit with TRAMP*
Magit requires at least GIR 2.2.0 in order to work.
If git version is configured by Environment Modules (module load ...), then Emacs may not be aware of this, as there will be still an obsolete GIT version available through the PATH variable.
In order to overcome this, you can customize the remote git executable, and set it directly in =magit-remote-git-executable=.


#+begin_src emacs-lisp
  ;; Set default connection mode to SSH
  (setq tramp-default-method "ssh")
  ;; Set default user
  (setq tramp-default-user "pi")
  ;; Set default host
  (setq tramp-default-host "192.168.1.5")
#+end_src

** Dired

*** Key Bindings

=Nawigation=

- =C-x d= (dired) - opens dired under given path
- =C-x j= (dired-jump)- opens dired exactly in the folder that the current file we're previewing is in
- =n= - next line
- =p= - previous line
- =h= - hides / shows hidden files (dotfiles)
- =j= (dired-goto-file)- jump to file in buffer (works a bit like an incremental search in 'text' buffers)
- =C-backspace= (^ by default)- go to parent directory
- =C-RET= - go to parent directory (in dired single)
- =RET= (dired-find-file)- select file or directory
- =o= (dired find-file-other) - Show file in other window without focusing (previewing files)
- =v= (dired-view-file) - open file but in a “preview” mode, close with q. =Very usefull option which allows to quickly look at the file.
- =g=  - refresh the buffer with revert-buffer after changing configuration (and after filesystem changes!)

=Marking files=

In Dired, you're going to be using selections for files you want to work on. In Dired, the concept for that is called =marking=.

 - =m= - Marks a file
 - =u= - Unmarks a file
 - =backspace= - Unmarks a file (from down to top)
 - =U= - Unmarks all files in buffer
 - =t / t= - Inverts marked files in buffer
 - =% m= - Mark files in buffer using regular expression
 - =*= - Lots of other auto-marking functions
 - =k / K= - “Kill” marked items (refresh buffer with g / g r to get them back)

=Copying files=
 - =C= - Copy marked files (or if no files are marked, the current file)

=Renaming and moving single and multiple files=
 - =R= - Rename ore moves marked files (works like Linux =mv= command), renaming multiple is a move!
 - =% R= - Rename based on regular expression: ^test , old-\&
 - =C-M-j= - this will help when renaming, in case when the name you typed does not belong to the list that popped out

=Power command=: =C-x C-q (dired-toggle-read-only)= - Makes all file names in the buffer editable directly to rename them! Press =Z Z= to confirm renaming or =Z Q= to abort.

=Deleting files=
 - =D= - Delete marked file
 - =d= - Mark file for deletion
 - =x= - Execute deletion for marks
 - =delete-by-moving-to-trash= - Move to trash instead of deleting permanently

=Creating and extracting archives=
 - =Z= - Compress or uncompress a file or folder to (.tar.gz)
 - =c= - Compress selection to a specific file
 - =dired-compress-files-alist= - bind compression commands to file extension

=Other common operations=
 - =T= - Touch (change timestamp)
 - =M= - Change file mode
 - =O= - Change file owner
 - =G= - Change file group
 - =S= - Create a symbolic link to this file
 - =L= - Load an Emacs Lisp file into Emacs

*** Configuration

*Some hints:*

- Output of a dired buffer looks very much like an output of the Linux command =ls=. This is not a coincidance, as in fact, dired output is derived exactly from that command. Hence, dired buffers output may be configured by adding speciffic flags to "internal" ls command. Those flags are stored in a variable =dired-listing-switches=.


#+begin_src emacs-lisp
  (use-package dired
    :ensure nil ;; dires is a built-in emacs package, so don't look for it in package repositories
    :commands (dired dired-jump) ;; defer this config until one of this commands is executed
    :bind (("C-x j" . dired-jump)
           ;; those bindings will only be valid if dired-mode is active
           :map dired-mode-map
           ;; change this from ^ which is not convenient
           ("<C-backspace>" . dired-up-directory)
           ;; this one is a default keybinding, keep it here as an information tough
           ("v" . dired-view-file))
    :custom ((dired-listing-switches "-agho --group-directories-first"))
    )

  ;; Thanks to this package, the directories that we've visited won't be existing as opened buffers.
  ;; Instead, all these buffers will be closed automatically.
  (use-package dired-single
    :after (dired)
    :commands (dired dired-jump)
    :bind (:map dired-mode-map
                ("<C-return>" . dired-single-up-directory)
                ("<return>"   . dired-single-buffer)))

  ;; This package has been replaced with "treemacs-icons-dired"
  ;; (use-package all-the-icons-dired)

  ;;  This package allow us to set a program different than Emacs, that we want to open given files with
  (use-package dired-open
    :commands (dired dired-jump)
    :config
    ;; Doesn't work as expected!
    ;;(add-to-list 'dired-open-functions #'dired-open-xdg t)
    (setq dired-open-extensions '(("png" . "gwenview")
                                  ("jpg" . "gwenview"))))

  (use-package dired-hide-dotfiles
    :hook (dired-mode . dired-hide-dotfiles-mode)
    :bind (:map dired-mode-map ("h" . dired-hide-dotfiles-mode)))

#+end_src

** go-translate

[[https://github.com/lorniu/go-translate][GitHub page]] with a lot of useful info and configurations.

In addition to Google Translate, it supports more engines like Google RPC API, Bing, DeepL. You can easily add other translation engines on the basis of the framework.

Some functions:
- =gts-do-transalate= - starts translating, will take =gts-default-translator= as the default translator

In the pop-up =read-from-minibuffer= interface triggled by =gts-prompt-picker=, you can use:
- =C-l= - to clear the input
- =C-p / C-n= - to switch transaltion directions. These directions are those configured in gts-translate-list

#+begin_src emacs-lisp
  (use-package go-translate
    :ensure t
    :custom
    ;; Confiugre language pairs used to transale
    (gts-translate-list '(("en" "pl") ("pl" "en")))
    ;; Configure the default transanslator (used by gts-do-transalte)
    (gts-default-translator
     (gts-translator
      :picker (gts-prompt-picker)
      :engines (list (gts-bing-engine) (gts-google-engine))
      :render (gts-buffer-render))))

  (defun my/translate-region ()
    (interactive)
    (gts-translate (gts-translator
                    :picker (gts-noprompt-picker)
                    :engines (list (gts-bing-engine) (gts-google-engine))
                    :render (gts-buffer-render))))

  (defun my/translate-region-pop-render ()
    (interactive)
    (gts-translate (gts-translator
                    :picker (gts-prompt-picker)
                    :engines (list (gts-bing-engine) (gts-google-engine))
                    :render (gts-posframe-pop-render))))

  (defun my/translate-region-pin-render ()
    (interactive)
    (gts-translate (gts-translator
                    :picker (gts-prompt-picker)
                    :engines (list (gts-bing-engine) (gts-google-engine))
                    :render (gts-posframe-pin-render))))

#+end_src

** command-log-mode

#+begin_src emacs-lisp
  (use-package command-log-mode
    :ensure t
    :bind (("C-c c t" . clm/toggle-command-log-buffer)
           ("C-c c o" . clm/open-command-log-buffer)
           ("C-c c x" . clm/close-command-log-buffer)
           ("C-c c c" . clm/command-log-clear)
           ("C-c c s" . clm/save-command-log)
           )
    :custom
    ;; disable default keybinding "C-c o" that opens command-log-buffer
    (command-log-mode-key-binding-open-log nil)
    :config
    ;; Enable command-log-mode globally by default
    (global-command-log-mode t))
#+end_src

** which-key

#+begin_src emacs-lisp
  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 1))
#+end_src

** idle-highlight-mode

#+begin_src emacs-lisp
  (use-package idle-highlight-mode
    :ensure t
    :custom
    (idle-highlight-idle-time 0.1)
    :hook
    ((prog-mode text-mode) . idle-highlight-mode))
#+end_src

** highlight-indent-guides

#+begin_src emacs-lisp
  (use-package highlight-indent-guides
    :ensure t
    :custom
    (highlight-indent-guides-method (quote character)))
#+end_src

** drag-stuff

#+begin_src emacs-lisp
  (use-package drag-stuff
    :ensure t)
#+end_src

** dumb-jump

#+begin_src emacs-lisp
  (use-package dumb-jump
    :ensure t)
#+end_src

** ag, rg, xref

#+begin_src emacs-lisp
  ;; Load Silver Searcher
  (use-package ag
    :ensure t)

  ;; Load ripgrep
  (use-package rg
    :ensure t)

  (use-package xref
    :ensure t)
#+end_src

** doom-modeline, keycast

#+begin_src emacs-lisp
  (use-package doom-modeline
    :after (all-the-icons)
    :ensure t
    :init (doom-modeline-mode 1)
    :config
    (setq doom-modeline-project-detection 'auto
          doom-modeline-height 40)
    :custom
    (display-battery-mode t))
#+end_src

** keycast

#+begin_src emacs-lisp
;; (use-package keycast
;;   :config
;;   ;; This works with doom-modeline, inspired by this comment:
;;   ;; https://github.com/tarsius/keycast/issues/7#issuecomment-627604064
;;   (define-minor-mode keycast-mode
;;     "Show current command and its key binding in the mode line."
;;     :global t
;;     (if keycast-mode
;; 	(add-hook 'pre-command-hook 'keycast--update t)
;;       (remove-hook 'pre-command-hook 'keycast--update)))
;;   (add-to-list 'global-mode-string '("" mode-line-keycast " "))
;;   (keycast-mode nil))
#+end_src

** auto-complete

#+begin_src emacs-lisp
  (use-package auto-complete
    :ensure t
    :config
    (global-auto-complete-mode t))
#+end_src

** recentf

#+begin_src emacs-lisp
  (use-package recentf
    :config
    (setq recentf-auto-cleanup 'never
          recentf-max-saved-items 1000
          recentf-save-file (concat user-emacs-directory ".recentf"))
    (recentf-mode t)
    :diminish nil)
#+end_src

** magit

#+begin_src emacs-lisp
  (use-package magit
    :ensure t
    :custom
    (magit-status-buffer-switch-function 'switch-to-buffer)
    :bind (("C-c g s" . magit-status)
           ("C-c g f" . magit-fetch)
           ("C-c g b" . magit-blame)
           ("C-c g r" . magit-branch)
           ("C-c g c" . magit-checkout)))
#+end_src

** projectile, treemacs-projectile

#+begin_src emacs-lisp
  (use-package projectile
    :ensure t
    :bind (
           ("<f7>"  . projectile-add-known-project)
           )
    :init
    (projectile-mode 1))
#+end_src

** treemacs

#+begin_src emacs-lisp
  (use-package treemacs
    :ensure t
    :bind (
           ("<C-f5>" . treemacs)
           ("<C-f6>" . treemacs-add-project-to-workspace)
           )
    :config
    (treemacs-follow-mode t)
    (treemacs-git-mode 'deferred)
    ;; Make tremacs display nice indents in files hierarchy
    ;; (treemacs-indent-guide-mode 't)
    ;; (treemacs-indent-guide-style 'line)
    :custom
    ;; This fixes problem with helm buffers (e.g. helm-M-x)
    ;; ocupying the entire widow
    (treemacs-display-in-side-window nil)
    ;; Set default treemacs width, and unlock the
    ;; drag-and-drop resize option
    (treemacs-width 50)
    (treemacs-width-is-initially-locked nil)
    ;; Disable test wrapping in treemacs window, when widnow is to narrow
    (treemacs-wrap-around nil)
    )

  (use-package treemacs-projectile
    :after (treemacs projectile)
    :ensure t)

  (use-package treemacs-magit
    :after (treemacs magit)
    :ensure t)

  (use-package treemacs-all-the-icons
    :ensure t
    :after (treemacs all-the-icons))
  
  (use-package treemacs-icons-dired
    :ensure t
    :hook (dired-mode . treemacs-icons-dired-enable-once))
#+end_src

** helm

#+begin_src emacs-lisp
  (use-package helm
    :ensure t
    :bind  (("M-x"     . helm-M-x)
            ("M-y"     . helm-show-kill-ring)
            ("C-x C-f" . helm-find-files)
            ("C-b"     . helm-buffers-list)
            ("C-c h o" . helm-occur)
            ("C-c h b" . helm-filtered-bookmarks)
            )
    :custom
    (helm-position 'bottom)
    ;; This fixes problem with helm buffers (e.g. helm-M-x)
    ;; ocupying the entire widow.
    ;; Although "helm-split-window-in-side-p" is deprecated
    ;; and superseeded "helm-split-window-inside-p", both
    ;; variables have to be set to t.
    (helm-split-window-in-side-p t)
    (helm-split-window-inside-p t)
    :init
    (helm-mode 1)
    (helm-autoresize-mode 1))

  ;; Ned to apply these changes in order to make "helm-icons" work together with dired buffers:
  ;; - thread: https://github.com/yyoncho/helm-icons/issues/16
  ;; - code changes: https://github.com/yyoncho/helm-icons/pull/17/commits/eead11e9bdb2b8f3e1c7464953cc5ca70388f564
  (use-package helm-icons
    :ensure t
    :after (all-the-icons helm)
    :custom
    (helm-icons-provider 'all-the-icons)
    :config
    (helm-icons-enable))

  (use-package helm-swoop
    :ensure t
    :bind
    (("M-s". helm-swoop))
    :custom
    ;; This decreases helm swoop speed but in favour of colorded results
    (helm-swoop-speed-or-color t)
    ;; This fixes problem with helm-swoop appearing in another window,
    ;; when using multiple windows in one frame (treemacs / minimap)
    (helm-swoop-split-with-multiple-windows t)
    )

  (use-package helm-xref
    :ensure t
    :after helm
    :commands helm-xref
    :config
    (setq xref-show-xrefs-function 'helm-xref-show-xrefs))

  (use-package helm-projectile
    :ensure t
    :after (helm projectile)
    :bind(
          ("C-p"   . helm-projectile-find-file)
          ("C-l"   . helm-projectile-recentf)
          ("<f8>"  . helm-projectile-switch-project)
          ))

  (use-package helm-ag
    :ensure t)

#+end_src

** minimap

#+begin_src emacs-lisp
  (use-package minimap
    :ensure t
    :custom
    (minimap-always-recenter nil)
    (minimap-hide-fringes t)
    (minimap-hide-scroll-bar nil)
    (minimap-highlight-line nil)
    (minimap-minimum-width 20)
    (minimap-recenter-type (quote relative))
    (minimap-recreate-window t)
    (minimap-update-delay 0)
    (minimap-width-fraction 0.06)
    (minimap-window-location (quote right))
    :custom-face
    (minimap-active-region-background ((((background dark)) (:background "#3c3c3c" :extend t)) (t (:background "#C847D8FEFFFF" :extend t))))
    (minimap-font-face ((t (:weight bold :height 15 :width normal :family "DejaVu Sans Mono"))))
    :config
    (minimap-mode -1))
#+end_src

** verilog-mode

#+begin_src emacs-lisp
  (use-package verilog-mode
    :ensure t
    :custom
    (verilog-align-ifelse t)
    (verilog-auto-delete-trailing-whitespace t)
    (verilog-auto-indent-on-newline t)
    (verilog-auto-newline nil)
    (verilog-highlight-grouping-keywords t)
    (verilog-highlight-modules t)
    (verilog-indent-level 2)
    (verilog-indent-level-behavioral 2)
    (verilog-indent-level-declaration 2)
    (verilog-indent-level-directive 0)
    (verilog-indent-level-module 2))
#+end_src

** python-mode

#+begin_src emacs-lisp
  (use-package python-mode
    :ensure t
    :hook
    (python-mode . lsp-deferred)
    (python-mode . (lambda ()
                     (setq indent-tabs-mode t)
                     (setq tab-width 4)
                     (setq python-indent-offset 4)))
    :custom
    (python-shell-interpreter "python3"))
#+end_src

** paredit

#+begin_src emacs-lisp
;; (use-package paredit
;;   :ensure t
;;   :init
;;   (add-hook 'clojure-mode-hook #'enable-paredit-mode)
;;   (add-hook 'cider-repl-mode-hook #'enable-paredit-mode)
;;   (add-hook 'emacs-lisp-mode-hook #'enable-paredit-mode)
;;   (add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
;;   (add-hook 'ielm-mode-hook #'enable-paredit-mode)
;;   (add-hook 'lisp-mode-hook #'enable-paredit-mode)
;;   (add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
;;   (add-hook 'scheme-mode-hook #'enable-paredit-mode)
;;   :config
;;   (show-paren-mode t)
;;   (paredit-mode t)
;;   :bind (("M-[" . paredit-wrap-square)
;;       ("M-{" . paredit-wrap-curly))
;;   :diminish nil)
#+end_src

* Key bingings

#+begin_src emacs-lisp
  ;; ==============================================================
  ;; KEY BINDINGS
  ;; ==============================================================
#+end_src

#+begin_src emacs-lisp
  (global-set-key (kbd "M-v")        #'my/scroll-half-page-down)
  (global-set-key (kbd "C-v")        #'my/scroll-half-page-up)

  (global-set-key (kbd "<f5>")       #'revert-buffer)
  (global-set-key (kbd "<f6>")       #'my/kill-asterisk-buffers)
  (global-set-key (kbd "<f9>")       #'minimap-mode)
  (global-set-key (kbd "<f12>")      #'xref-find-definitions)

  (global-set-key (kbd "<prior>")    #'drag-stuff-up)
  (global-set-key (kbd "<next>")     #'drag-stuff-down)

  (global-set-key (kbd "C-x 0")      #'kill-buffer-and-window)
  (global-set-key (kbd "C-c d")      #'my/duplicate-current-line-or-region)
  (global-set-key (kbd "C-c k")      #'kill-whole-line)
  (global-set-key (kbd "C-c x")      #'delete-trailing-whitespace)
  (global-set-key (kbd "C-c w")      #'my/toggle-highlight-trailing-whitespaces)
  (global-set-key (kbd "C-c h")      #'my/toggle-idle-highlight-mode)
  (global-set-key (kbd "C-c C-e")   #'eval-region)
  (global-set-key (kbd "C-c t")       #'my/untabify-entire-buffer)

  (global-set-key (kbd "C-c o i")    #'my/open-init-file)
  (global-set-key (kbd "C-c o a")   #'org-agenda-list)

  (global-set-key (kbd "C-c p r")     #'helm-projectile-recentf)
  (global-set-key (kbd "C-c p R")    #'projectile-replace)
  (global-set-key (kbd "C-c p x")    #'projectile-replace-regexp)
  (global-set-key (kbd "C-,")          #'helm-projectile-grep)
  (global-set-key (kbd "C-.")          #'helm-projectile-ag)

  (define-key helm-map (kbd "TAB")   #'helm-execute-persistent-action)
  (define-key helm-map (kbd "<tab>") #'helm-execute-persistent-action)
  (define-key helm-map (kbd "C-z")   #'helm-select-action)

  (global-set-key (kbd "C-,")        #'helm-projectile-grep)
  (global-set-key (kbd "C-.")        #'helm-projectile-ag)

  (define-key org-mode-map (kbd "C-x C-z")  #'outline-hide-entry)
  (define-key org-mode-map (kbd "C-x C-a")  #'outline-hide-body)
  (define-key org-mode-map (kbd "C-x C-n")  #'outline-next-heading)
  (define-key org-mode-map (kbd "C-x C-p")  #'outline-prev-heading)

  (define-key org-agenda-mode-map (kbd "m")  #'org-agenda-month-view)

  (eval-after-load 'verilog-mode
    '(define-key verilog-mode-map (kbd "C-{") 'verilog-beg-of-defun))

  (eval-after-load 'verilog-mode
    '(define-key verilog-mode-map (kbd "C-}") 'verilog-end-of-defun))
#+end_src
* Hooks

#+begin_src emacs-lisp
  ;; ==============================================================
  ;; HOOKS
  ;; ==============================================================
#+end_src

#+begin_src emacs-lisp
;; PROG
(add-hook 'prog-mode-hook 'toggle-truncate-lines)
(add-hook 'prog-mode-hook 'linum-mode)
(add-hook 'prog-mode-hook 'highlight-indent-guides-mode)

;; POST COMMAND
;; (add-hook 'post-command-hook #'highlight-syntax-duplicates)

;; KILL BUFFER / QUIT WINDOW
;; (add-hook 'kill-buffer-hook <fun>)
;; (add-hook 'quit-window-hook <fun>)

;; XREF
(add-hook 'xref-backend-functions #'dumb-jump-xref-activate)

;; MINIBUFFER
(defun my/minibuffer-setup ()
  "Function sets font size in the minibuffer"
  (set (make-local-variable 'face-remapping-alist)
       '((default :height 1.3))))

(add-hook 'minibuffer-setup-hook 'my/minibuffer-setup)
#+end_src

* End message

#+begin_src emacs-lisp
(message "... finished reading ~/.emacs.d/init.el")
#+end_src
